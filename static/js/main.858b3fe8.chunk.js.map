{"version":3,"sources":["components/Card/Card.js","components/Wrapper/Wrapper.js","components/Header/Header.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","handleClick","id","alt","name","src","image","Wrapper","children","Header","score","highscore","App","state","data","topScore","CorrectGuess","newData","_this$state","_this","newScore","newTopScore","setState","shuffleData","IncorrectGuess","resetData","map","item","Object","objectSpread","clicked","i","length","j","Math","floor","random","temp","handleItemClick","guessedCorrectly","newItem","this","_this2","components_Wrapper_Wrapper","components_Header_Header","components_Card_Card","key","shake","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"qnEAWeA,SARF,SAAAC,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,YAAYN,EAAMO,MAC3DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,YCDxBC,SAFC,SAAAZ,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,YCS1CC,SATA,SAAAd,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMa,UAC9BZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACUJ,EAAMe,MADhB,eACmCf,EAAMgB,qBCoF9BC,oNAnFfC,MAAQ,CACNC,OACAJ,MAAO,EACPK,SAAU,KAOZC,aAAe,SAAAC,GAAW,IAAAC,EACIC,EAAKN,MAAzBE,EADgBG,EAChBH,SACFK,EAFkBF,EACNR,MACO,EACnBW,EAAcD,EAAWL,EAAWK,EAAWL,EACrDI,EAAKG,SAAS,CACZR,KAAMK,EAAKI,YAAYN,GACvBP,MAAOU,EACPL,SAAUM,OAIdG,eAAiB,SAAAV,GACfK,EAAKG,SAAS,CACZR,KAAMK,EAAKM,UAAUX,GACrBJ,MAAO,OAIXe,UAAY,SAAAX,GACV,IAAMW,EAAYX,EAAKY,IAAI,SAAAC,GAAI,OAAAC,OAAAC,EAAA,EAAAD,CAAA,GAAUD,EAAV,CAAgBG,SAAS,MACxD,OAAOX,EAAKI,YAAYE,MAG1BF,YAAc,SAAAT,GAEZ,IADA,IAAIiB,EAAIjB,EAAKkB,OAAS,EACfD,EAAI,GAAG,CACZ,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOvB,EAAKiB,GAClBjB,EAAKiB,GAAKjB,EAAKmB,GACfnB,EAAKmB,GAAKI,EACVN,IAEF,OAAOjB,KAGTwB,gBAAkB,SAAApC,GAChB,IAAIqC,GAAmB,EACjBtB,EAAUE,EAAKN,MAAMC,KAAKY,IAAI,SAAAC,GAClC,IAAMa,EAAOZ,OAAAC,EAAA,EAAAD,CAAA,GAAQD,GAOrB,OANIa,EAAQtC,KAAOA,IACZsC,EAAQV,UACXU,EAAQV,SAAU,EAClBS,GAAmB,IAGhBC,IAETD,EACIpB,EAAKH,aAAaC,GAClBE,EAAKK,eAAeP,uFApDxBwB,KAAKnB,SAAS,CAAER,KAAM2B,KAAKlB,YAAYkB,KAAK5B,MAAMC,yCAuD3C,IAAA4B,EAAAD,KACP,OACE7C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC6C,EAAD,KACA/C,EAAAC,EAAAC,cAAC8C,EAAD,CAAQlC,MAAO+B,KAAK5B,MAAMH,MAAOK,SAAU0B,KAAK5B,MAAME,WACnD0B,KAAK5B,MAAMC,KAAKY,IAAI,SAAAC,GAAI,OACvB/B,EAAAC,EAAAC,cAAC+C,EAAD,CACEC,IAAKnB,EAAKzB,GACVA,GAAIyB,EAAKzB,GACT6C,OAAQL,EAAK7B,MAAMH,OAASgC,EAAK7B,MAAME,SACvCd,YAAayC,EAAKJ,gBAClBhC,MAAOqB,EAAKrB,mBA1EN0C,oBCFlBC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.858b3fe8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Card.css\";\n\nconst Card = props => (\n  <div className=\"data\" onClick={() => props.handleClick(props.id)}>\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Header.css\";\n\nconst Header = props => (\n  <div className=\"header\">\n    <div className=\"title\">{props.children}</div>\n    <div className=\"scores\">\n      Score: {props.score} Highscore: {props.highscore}\n    </div>\n  </div>\n);\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport Card from \"./components/Card\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport data from \"./data.json\";\nimport \"./App.css\";\n\nclass App extends Component {\nstate = {\n  data,\n  score: 0,\n  topScore: 0\n};\n\ncomponentDidMount() {\n  this.setState({ data: this.shuffleData(this.state.data) });\n}\n\nCorrectGuess = newData => {\n  const { topScore, score } = this.state;\n  const newScore = score + 1;\n  const newTopScore = newScore > topScore ? newScore : topScore;\n  this.setState({\n    data: this.shuffleData(newData),\n    score: newScore,\n    topScore: newTopScore\n  });\n};\n\nIncorrectGuess = data => {\n  this.setState({\n    data: this.resetData(data),\n    score: 0\n  });\n};\n\nresetData = data => {\n  const resetData = data.map(item => ({ ...item, clicked: false }));\n  return this.shuffleData(resetData);\n};\n\nshuffleData = data => {\n  let i = data.length - 1;\n  while (i > 0) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = data[i];\n    data[i] = data[j];\n    data[j] = temp;\n    i--;\n  }\n  return data;\n};\n\nhandleItemClick = id => {\n  let guessedCorrectly = false;\n  const newData = this.state.data.map(item => {\n    const newItem = { ...item };\n    if (newItem.id === id) {\n      if (!newItem.clicked) {\n        newItem.clicked = true;\n        guessedCorrectly = true;\n      }\n    }\n    return newItem;\n  });\n  guessedCorrectly\n    ? this.CorrectGuess(newData)\n    : this.IncorrectGuess(newData);\n};\n\nrender() {\n  return (\n    <div>\n      <Wrapper>\n      <Header score={this.state.score} topScore={this.state.topScore} />\n        {this.state.data.map(item => (\n          <Card\n            key={item.id}\n            id={item.id}\n            shake={!this.state.score && this.state.topScore}\n            handleClick={this.handleItemClick}\n            image={item.image}\n          />\n        ))}\n      </Wrapper>\n     \n    </div>\n  );\n}\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}